#!/usr/bin/perl

# (c) 2017 Jim Salter. Licensed GPLv3.  whenits --usage for details.

# this software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
# from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
# project's Git repository at https://github.com/jimsalterjrs/network-testing/blob/master/LICENSE.


use Time::HiRes qw ( usleep gettimeofday );
use POSIX 'setsid';

my $daemonize;
my $exectime;

if (scalar @ARGV < 1 || $ARGV[0] =~ /usage$/i) {
	print "\nwhenits is a tool to execute a command at a time in the near future with\n";
	print "millisecond-or-better precision.\n";
	print "\n";
	print "Usage:\n";
	print "\n";
	print "    whenits [-d] {time} {/path/to/command {arg1 arg2 arg3 ...} }\n";
	print "\n";
	print "    -d            ... optional: daemonize (fork and run in background).\n";
	print "                      You'll need this if you're scheduling commands\n";
	print "                      that need to run after the current shell closes.\n";
	print "\n";
	print "    time          ... Required. Execution time may be specified in absolute\n";
	print "                      epoch seconds, or relative to current time -\n";
	print "                      eg now+5s, now+10m, now+2h.\n";
	print "\n";
	print "    command       ... the command to be scheduled at {time}, along with\n";
	print "                      any arguments to be passed to it.\n";
	print "\n";
	exit 256;
}

if ($ARGV[0] eq '-d') {
	$daemonize = 1;
	$exectime = $ARGV[1];
	# remove first two elements from @ARGV - all remaining is the command
	# to run and all of its arguments
	shift @ARGV;
	shift @ARGV;
} else {
	$exectime = $ARGV[0];
	# remove first element from @ARGV - all remaining is the command
	# to run and all of its arguments
	shift @ARGV;
}

if ($exectime =~ /^now+/) {
	$exectime =~ s/^now+//;
	if ($exectime =~ /s$/) {
		$exectime =~ s/s$//;
		$exectime = time() + $exectime;
	} elsif ($exectime =~ /m$/) {
		$exectime =~ s/m$//;
		$exectime = $exectime * 60;
		$exectime = time() + $exectime;
	} elsif ($exectime =~ /h$/) {
		$exectime =~ s/h$//;
		$exectime = $exectime * 60 * 60;
		$exectime = time() + $exectime;
	}
} elsif (! ($exectime =~ /^[0-9]*$/) ) {
	print "Sorry, I don't understand $exectime - try an exact time in Unix epoch seconds, or now+30s, now+5m, etc.\n";
	exit 256;
}

if ($exectime < time()) {
	print "Can't execute jobs in the past!\n";
	exit 256;
}

if (! $daemonize) { 
	print "\nCurrent time is: " . time() . ". Executing in " . ($exectime-time()) . " seconds, at $exectime.\n\n";
	print "WARNING: I'm a foreground task! Use -d if you need to daemonize me (so I don't\n";
	print "         need you still connected to me when I run the task).\n\n";
}

my ($seconds,$microseconds) = gettimeofday();
my $currenttime = "$seconds." . sprintf ("%.06d", $microseconds);
my $usleeptime = ($exectime - $currenttime) * 1000000;

if ($daemonize) { daemonize(); }

# low cpu power sleep cycle. wake up 200ms early for a higher-power, more accurate wait cycle.
$usleeptime -= 200000;
if ($usleeptime>0) { usleep $usleeptime; }

# high power wait cycle. more accurate than usleep
my $time = time();
while ($time < $exectime) { $time = time() };

# Time to wake up now!
my @args = @ARGV;
exec @args;

exit 0;

sub daemonize {
	# fork and run in the background, let foreground parent die.

	# I don't wanna chdir /, that'll break ./ commands!
	# chdir '/'               	or die "Can't chdir to /: $!";

	open STDIN, '/dev/null' 	or die "Can't read /dev/null: $!";
	open STDOUT, '>/dev/null'	or die "Can't write to /dev/null: $!";
	defined(my $pid = fork) 	or die "Can't fork: $!";
	exit if $pid;
	setsid                  	or die "Can't start a new session: $!";
	open STDERR, '>&STDOUT' 	or die "Can't dup stdout: $!";
}
